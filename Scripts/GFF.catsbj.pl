#!/usr/bin/env perl

# @author  Luis M. Rodriguez-R
# @license Artistic-2.0

use warnings;
use strict;
use List::Util qw/min max/;
use Getopt::Std;

sub HELP_MESSAGE { die "

Description:
  Generates a list of coordinates from a GFF table concatenating the subject
  sequences.
  
  See also: BlastTab.recplot2.R and BlastTab.catsbj.pl

Usage:
  $0 [options] seq.fa map.gff > abs-coords.tsv

  seq.fa	Subject sequences (contigs) in FastA format.
  map.gff	Features to map in GFF.
   
  Options:
  -L path       Generate a file with the absolute coordinates of the
                concatenated contigs. This is identical to the .lim file
                generated by BlastTab.catsbj.pl.
  -i            Preserve exact coordinates and include inter-feature windows as
                separate bins. By default, the coordinates are set in the
                midpoint between features when non-contiguous.
  -s		The FastA provided is to be treated as a subset of the subject.
   		By default, it expects all the contigs to be present in the
		BLAST.
  -q		Run quietly.
  -h		Display this message and exit.
   
"; }

my %o;
getopts('L:isqh', \%o);
my($fa, $map) = @ARGV;
($fa and $map) or &HELP_MESSAGE;
$o{h} and &HELP_MESSAGE;

my %seq = ();
my @seq = ();
my $tot = 0;

SEQ:{
  print STDERR "== Reading reference sequences\n" unless $o{q};
  open FA, "<", $fa or die "Cannot read the file: $fa: $!\n";
  my $cur_seq = '';
  while(<FA>){
    chomp;
    if(m/^>(\S+)/){
      my $c = $1;
      $seq{$c} = exists $seq{$cur_seq} ? $seq{$cur_seq}+1 : 1;
      push @seq, $c;
      $cur_seq = $c;
    }else{
      s/[^A-Za-z]//g;
      $seq{$cur_seq} += length $_;
    }
  }
  close FA;
  print STDERR " Found ".(scalar @seq)." sequences.\n" unless $o{q};
}

$o{L} ||= '/dev/null';
open LIM, ">", $o{L} or die "Cannot create the file: $o{L}: $!\n";
my $l = 0;
for my $s (@seq){
  print LIM "$s\t".(++$l)."\t$seq{$s}\n";
  ($l, $seq{$s}) = ($seq{$s}, $l);
}
close LIM;

MAP: {
  print STDERR "== Reading mapping\n" unless $o{q};
  open GFF, "<", $map or die "Cannot read the file: $map: $!\n";
  my $last_end = 1;
  my $last_name = "NA";
  print "1\tNA\tNA\n";
  my $i = 0;
  FEATURE: while(<GFF>){
    next if /^\s*(#.*)?$/; # Blank or comment lines
    chomp;
    my @ln = split /\t/;
    $ln[4] or die "Cannot parse line $map:$.: $_\n";
    unless(exists $seq{$ln[0]}){
      die "Cannot find the subject sequence: $ln[0]\n" unless $o{s};
      next FEATURE;
    }
    $i++;
    my $start = $seq{$ln[0]}+$ln[3];
    my $end   = $seq{$ln[0]}+$ln[4];
    my $name  = "feat_$i";
    if($ln[8] =~ /^gene_id=(\d+)/){ # <- GeneMark style
      $name = "gene_id_$1";
    }elsif($ln[8] =~ /^ID=(\d+)_(\d+)/){ # <- Prodigal style
      $name = $ln[0]."-".($1-1)."_$2";
    }elsif($ln[8] =~ /^ID=([^;]+)/){
      $name = $1;
    }
    if($o{i}){
      $start = $last_end if $start < $last_end;
      print "$start\t$last_name~$name\tGAP\n" unless $start==$last_end;
      print "$end\t$name\tFEAT\n";
    }else{
      my $midpoint = int(($last_end + $start)/2);
      print "$last_end\t$last_name\tFEAT\n" unless $last_end==1;
    }
    $last_name = $name;
    $last_end = $end;
  }
  if($last_end > 1){
    if($o{i}){
      print "$l\t$last_name~NA\tGAP\n" unless $last_end==$l;
    }else{
      print "$l\t$last_name\tFEAT\n";
    }
  }
  close GFF;
  print STDERR " done.\n" unless $o{q};
}

